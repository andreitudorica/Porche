\import RPi.GPIO as GPIO

import time
GPIO.setmode(GPIO.BCM)
import sys as _sys
try:
    import threading as _threading
    from threading import Thread
except ImportError:
    del _sys.modules[__name__]
    raise
import PID_follower 
from DirectionControl import *
from ArduinoInput import *
from ThrottleControl import *
from UltrasonicSensors import *
from Mapping import *
from PID_follower import correction

sensor = 0
delta = 0
speedSet = 0
def setup():
    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)
    setTurning(0)

setup()
time.sleep(4)
setThrottle(7.9+delta+speedSet)
t=time.time()
LastMPG=time.time()
CurrMPG=time.time()
lp=0
lthrot=0
while time.time()<t+100: 
	if EncoderMPG()==1:
        	CurrMPG=time.time()
		print "MPG: ",CurrMPG-LastMPG, "SpeedSet: ",speedSet
       		if CurrMPG-LastMPG>0.03:
			if speedSet<0.05:
           			speedSet+=0.005
			else:
				speedSet=0.05
        	else:
			if speedSet > -0.1:
            			speedSet-=0.01
			else:
				speedSet=-0.1
		LastMPG=time.time()
        sensorBuffer=getTriggeredSensor()
	if sensorBuffer!=0:
        	sensor=sensorBuffer
	ComputedCorrection=correction(sensor)
	if lp!=sensorBuffer:
		#print sensorBuffer," Computed correction: ",ComputedCorrection
		lp=sensorBuffer
	setTurning(ComputedCorrection)
	throt=7.9+delta+speedSet
	if throt != lthrot:
		print "Throotle ",throt
		lthrot=throt
setThrottle(7.5)
print "Stop"

GPIO.cleanup()
